
public class BinaryExpr extends Expr{
	
	private Expr l, r;
	private Op op;
	
	public BinaryExpr(Expr l, Op op, Expr r) {
		this.l = l;
		this.r = r;
		this.op = op;
	}
	
	public Expr getLeft() {
		return l;
	}

	public Expr getRight() {
		return r;
	}

	public Op getOP() {
		return op;
	}

	public boolean isTerm() {
		return l.isTerm() && r.isTerm() && op == Op.PRODUCT;
	}

	public boolean isNorm() {
		return ((this.isTerm())||(l.isNorm() && r.isNorm() && op == Op.SUM));
	}
	
	public String toString() {
		return "(" + l.toString() + op + r.toString() + ")";
	}
	
	public BinaryExpr normalize() {
		if (this.isNorm())
			return this;
		else if (getLeft().getLeft() != null)
			return (new BinaryExpr((new BinaryExpr(l.getLeft(), Op.PRODUCT, r).normalize()), Op.SUM, new BinaryExpr(l.getRight(), Op.PRODUCT, r).normalize()));
		else
			return (new BinaryExpr(new BinaryExpr(l, Op.PRODUCT, r.getLeft()), Op.SUM, new BinaryExpr(l, Op.PRODUCT, r.getRight()))).normalize();
		}
	
	public static void main(String[] args){
		BinaryExpr e0=new BinaryExpr(Expr("x"), Op.PRODUCT, Var("y"));
		BinaryExpr e1=new BinaryExpr(x, Op.SUM, y);
		BinaryExpr e2=new BinaryExpr(e0, Op.SUM, z);
		BinaryExpr e3=new BinaryExpr(e1,Op.PRODUCT, z);
		BinaryExpr e4=new BinaryExpr(e0, Op.PRODUCT, z);
		BinaryExpr e5=new BinaryExpr(e1,Op.PRODUCT, e1);
	}

}
