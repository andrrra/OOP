import java.util.Arrays;

public class Rearrangement {
	
	public static int dotWith(int[] a, int[] b){
		int k=0;
		if (a.length==b.length){
			for(int i=0;i<a.length;i++){
				k+=a[i]*b[i];
			}
		}
		return k;
	}
	
	public static void rotate (int [] b){
		for (int i =b.length-1;i>=1;i--){
			int aux = b[i];
			b[i]=b[i-1];
			b[i-1]=aux;
		}
	}
	
	public static int useRotations(int[] a, int[] b){
		if(a.length!=b.length) return 0;
		int max = dotWith(a,b);
		for (int i = 0;i<a.length;i++){
			rotate(b);
			if (max<dotWith(a,b)) max = dotWith(a,b);
		}
		return max;
	}
	
	public static int useSorted(int[] a, int[] b){
		if (a.length!=b.length) return 0;
		Arrays.sort(a);
		Arrays.sort(b);
		return dotWith(a,b);
	}
	
	public static void main (String[] args){
		int n=Integer.parseInt(args[0]);
	    int[] a=new int[n];
	    int[] b=new int[n];
	    int j=1;
	    for(int i=0;i<n;i++)
	    	a[i]=Integer.parseInt(args[j++]);
	    j=1;
	    for(int i=0;i<n;i++)
	        b[i]=Integer.parseInt(args[j++]);
	    System.out.println("dotWith gave: "+dotWith(a,b));
	    System.out.println("useRotations gave: "+useRotations(a,b));
	    System.out.println("useSorted gave: "+useSorted(a,b));  
	}


}
